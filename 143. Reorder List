/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    void reorderList(ListNode* head) {
        if(head == NULL || head->next == NULL || head->next->next == NULL) return;
        
        //find middle
        ListNode* fast = head;
        ListNode* slow = head;
        
        while(fast != NULL && fast->next != NULL){
            fast = fast->next->next;
            slow = slow->next;
        }
        
        //reverse from after middle
        ListNode* cur = slow->next;
        ListNode* curNext = cur->next;
        ListNode* pre = NULL;
        
        while(cur != NULL){
            cur->next = pre;
            pre = cur;
            cur = curNext;
            if(cur == NULL) break;
            curNext = cur->next;
        }
        
        //integrate two lists
        ListNode* p1 = head;
        ListNode* p2 = pre;
        
        while(p1 != NULL && p2 != NULL){
            slow->next = p2->next;
            p2->next = p1->next;
            p1->next = p2;
            p1 = p2->next;
            p2 = slow->next;
        }
        
    }
};
